service: ping-pong-graphql-api
provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  environment:
    ITEM_TABLE: ping-pong-scores-dev # table name
    RANK_TABLE: players-rank-dev
    PLAYERS_TABLE: players-dev
  iamRoleStatements:
    - Effect: Allow # allow the Lambda to Get and Put Items of this table
      Action:
        - dynamodb:GetItem 
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:UpdateItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/ping-pong-scores-dev'
    - Effect: Allow # allow the Lambda to Get and Put Items of this table
      Action:
        - dynamodb:GetItem 
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:UpdateItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/players-rank-dev'
    - Effect: Allow # allow the Lambda to Get and Put Items of this table
      Action:
        - dynamodb:GetItem 
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:UpdateItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/players-dev'

resources:
  Resources:
    ItemsTable: # define the table
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'ping-pong-scores-dev'
    RanksTable: # define the table
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: playerId
            AttributeType: S
        KeySchema:
          - AttributeName: playerId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'players-rank-dev'
    PlayersTable: # define the table
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: playerId
            AttributeType: S
        KeySchema:
          - AttributeName: playerId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'players-dev'
functions:
  graphql:
    handler: src/apollo-server.graphqlHandler
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
          cors: true
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager
custom:
  webpack:
    includeModules: true
  customDomain:
    domainName: serverless.staara.ca
    basePath: ''
    stage: dev
    createRoute53Record: true